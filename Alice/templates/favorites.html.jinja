<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stations favorites</title>
    <link rel="stylesheet" href="/static/CSS/light.css">

</head>
<body>
    <h1>Stations favorites</h1>
    
<script>
        // Pour ajouter une nouvelle station favorite
        

        // Fonction pour mettre à jour les stations favorites affichées dans l'interface utilisateur
        function updateFavoriteStations(favoriteStations) {
            const favoriteStationsElement = document.getElementById('favorite-stations');
            favoriteStationsElement.innerHTML = '';
            favoriteStations.forEach(station => {
                const stationElement = document.createElement('li');
                stationElement.innerHTML = `
                    <strong>Name:</strong> ${station.name}<br>
                    <strong>Capacity:</strong> ${station.capacity}<br>
                    <strong>Number of Docks Available:</strong> ${station.numdocksavailable}<br>
                    <strong>Number of Bikes Available:</strong> ${station.numbikesavailable}<br>
                    <strong>Mechanical:</strong> ${station.mechanical}<br>
                    <strong>Ebike:</strong> ${station.ebike}<br>
                    <button onclick="updateFavoriteStation('${station.stationcode}')">Update</button>
                    <button onclick="deleteFavoriteStation('${station.stationcode}')">Delete</button>
                    `;
                favoriteStationsElement.appendChild(stationElement);
            });
        }

        // Fonction pour récupérer les stations favorites depuis le serveur
        function fetchFavoriteStations() {
            fetch('/favorites')
                .then(response => response.json())
                .then(data => {
                    const favoriteStations = data.results;
                    updateFavoriteStations(favoriteStations);
                })
                .catch(error => console.error('Error:', error));
        }

        // Fonction pour mettre à jour une station favorite
        function updateFavoriteStation(stationCode) {
            const newName = prompt("Enter the new name for the station:");
            if (newName !== null && newName.trim() !== "") {
                const stationData = {
                    name: newName
                };
                fetch(`/favorites/${stationCode}`, {
                    method: 'PUT',
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify(stationData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    fetchFavoriteStations();
                })
                .catch(error => console.error('Error:', error));
            }
        }

        // Fonction pour supprimer une station favorite
        function deleteFavoriteStation(stationCode) {
            if (confirm("Are you sure you want to delete this favorite station?")) {
                fetch(`/favorites/${stationCode}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    fetchFavoriteStations();
                })
                .catch(error => console.error('Error:', error));
            }
        }

        window.onload = fetchFavoriteStations;
    </script>





</body>
</html>
